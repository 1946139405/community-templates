<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>5.4</version>
    <date>2021-12-28T14:11:37Z</date>
    <groups>
        <group>
            <uuid>7df96b18c230490a9a0a9e2307226338</uuid>
            <name>Templates</name>
        </group>
    </groups>
    <templates>
        <template>
            <uuid>4036bee0c3c242a2a6f170b7abdbdeeb</uuid>
            <template>Template Synology HyperBackup</template>
            <name>Template Synology HyperBackup</name>
            <groups>
                <group>
                    <name>Templates</name>
                </group>
            </groups>
            <discovery_rules>
                <discovery_rule>
                    <uuid>8c30193d25f54ac9a9064961cdd7df92</uuid>
                    <name>Hyperbackup jobs</name>
                    <type>SSH</type>
                    <key>ssh.run[hyperbackupJobs,{HOST.DNS},22,]</key>
                    <delay>4h</delay>
                    <params>bck=$(sudo grep -oP '(?&lt;=Backup task ).*?(?= completes)' /var/log/messages)
bck=&quot;${bck//]/],}&quot;
echo $bck</params>
                    <username>{$SSH_USERNAME}</username>
                    <password>{$SSH_PASSWORD}</password>
                    <item_prototypes>
                        <item_prototype>
                            <uuid>bfebf3d0011046b4b4fd181d336822dc</uuid>
                            <name>Hyperbackup {#BACKUP.NAME}</name>
                            <type>SSH</type>
                            <key>ssh.run[hyperbackup.{#BACKUP.NAME}.date,{HOST.DNS},22,]</key>
                            <delay>5m</delay>
                            <units>unixtime</units>
                            <params>message=$(sudo grep &quot;{#BACKUP.NAME}&quot; /var/log/messages | grep -w 'with result \[[1]\]' | tail -n1)
timeStamp=$(echo $message | grep -P '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]' -o)

backupDate=$(date --date &quot;$timeStamp&quot;Z +'%s')
echo $backupDate</params>
                            <username>{$SSH_USERNAME}</username>
                            <password>{$SSH_PASSWORD}</password>
                            <tags>
                                <tag>
                                    <tag>Application</tag>
                                    <value>BACKUP</value>
                                </tag>
                            </tags>
                        </item_prototype>
                        <item_prototype>
                            <uuid>42b2b97a437242e79573cc5c8e5b4393</uuid>
                            <name>Hyperbackup {#BACKUP.NAME} length</name>
                            <type>SSH</type>
                            <key>ssh.run[hyperbackup.{#BACKUP.NAME}.length,{HOST.DNS},22,]</key>
                            <delay>5m</delay>
                            <units>s</units>
                            <params>message=$(sudo grep &quot;{#BACKUP.NAME}&quot; /var/log/messages | grep -w 'with result \[[1]\]' | tail -n1)
echo $message | grep -P '(?&lt;=\[)\d*(?= sec\])' -o</params>
                            <username>{$SSH_USERNAME}</username>
                            <password>{$SSH_PASSWORD}</password>
                            <tags>
                                <tag>
                                    <tag>Application</tag>
                                    <value>BACKUP</value>
                                </tag>
                            </tags>
                        </item_prototype>
                        <item_prototype>
                            <uuid>d7f759c371444663a2088c4f675dbafb</uuid>
                            <name>Hyperbackup {#BACKUP.NAME} result</name>
                            <type>SSH</type>
                            <key>ssh.run[hyperbackup.{#BACKUP.NAME}.result,{HOST.DNS},22,]</key>
                            <delay>5m</delay>
                            <params>message=$(sudo grep &quot;{#BACKUP.NAME}&quot; /var/log/messages | grep -w 'with result' | tail -n1)
echo $message | grep -P '(?&lt;=\[)\d(?=\])' -o</params>
                            <username>{$SSH_USERNAME}</username>
                            <password>{$SSH_PASSWORD}</password>
                            <valuemap>
                                <name>Hyperbackup Status</name>
                            </valuemap>
                            <tags>
                                <tag>
                                    <tag>Application</tag>
                                    <value>BACKUP</value>
                                </tag>
                            </tags>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <uuid>d7b958a27365416cbb520ea9897fa054</uuid>
                                    <expression>last(/Template Synology HyperBackup/ssh.run[hyperbackup.{#BACKUP.NAME}.result,{HOST.DNS},22,])&lt;&gt;1</expression>
                                    <name>HyperBackup {#BACKUP.NAME} Failed on {DNS.NAME}</name>
                                    <priority>AVERAGE</priority>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <lld_macro_paths>
                        <lld_macro_path>
                            <lld_macro>{#BACKUP.NAME}</lld_macro>
                            <path>$.1</path>
                        </lld_macro_path>
                    </lld_macro_paths>
                    <preprocessing>
                        <step>
                            <type>STR_REPLACE</type>
                            <parameters>
                                <parameter>[</parameter>
                                <parameter/>
                            </parameters>
                        </step>
                        <step>
                            <type>STR_REPLACE</type>
                            <parameters>
                                <parameter>]</parameter>
                                <parameter/>
                            </parameters>
                        </step>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>var newStr = value.substring(0, value.length - 1);
const myArray = newStr.split(&quot;, &quot;);

function onlyUnique(value, index, self) {
  return self.indexOf(value) === index;
}

var unique = myArray.filter(onlyUnique);
risultato = unique.join('\n');
return risultato;</parameter>
                            </parameters>
                        </step>
                        <step>
                            <type>CSV_TO_JSON</type>
                            <parameters>
                                <parameter/>
                                <parameter/>
                                <parameter>0</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
            <valuemaps>
                <valuemap>
                    <uuid>ccfb6a5a03ca4694b471a6e764f1583f</uuid>
                    <name>Hyperbackup Status</name>
                    <mappings>
                        <mapping>
                            <value>1</value>
                            <newvalue>OK</newvalue>
                        </mapping>
                        <mapping>
                            <type>DEFAULT</type>
                            <newvalue>Not OK</newvalue>
                        </mapping>
                    </mappings>
                </valuemap>
            </valuemaps>
        </template>
    </templates>
</zabbix_export>
